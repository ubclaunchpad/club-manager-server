import { google } from 'googleapis';

/** @description This is path to json file with the service account keys
 *               These keys can be generated by creating a service account from the Google Developers Console
 *               Change the path to that of the file that you generate to access the Sheets API
 */
import keys from '../../../keys.json';

/** @description Creates a client using the API key from keys.json file */
const client = new google.auth.JWT(keys.client_email, null, keys.private_key, [
    'https://www.googleapis.com/auth/spreadsheets',
]);

/** @description Authorizes the client for access to Sheets API */
const authorize = () => {
    client.authorize(function (err) {
        if (err) {
            console.log(err);
        } else {
            console.log('Connected');
        }
    });
};

/**
 * @description Parses applicant data from given Google sheet URL and name
 *              Note: the sheet must to open to access by URL or must give the Google service account email
 *              (which is found in keys.json) access
 * @param {string} url - The URL of the Google sheet
 * @param {string} sheetName - The name of the Google sheet
 */
export async function getData(url: string, sheetName: string): Promise<any[][]> {
    authorize();
    const gsapi = google.sheets({ version: 'v4', auth: client });

    const id = getSheetID(url);

    const opt = {
        spreadsheetId: id,
        range: `${sheetName}`,
    };

    const data = await gsapi.spreadsheets.values.get(opt);

    return data.data.values;
}

/**
 * @description Extracts sheet id from url
 * @param {string} url - The url of the google sheet
 */
function getSheetID(url: string) {
    let id = url.match('/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)')[0];
    id = id.replace('/spreadsheets/d/', '');
    return id;
}
